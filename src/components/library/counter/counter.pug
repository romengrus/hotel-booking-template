//- Counter component
//- label   {string} label text
//- plurals {array} plural forms of label for [1, 2, 0] items (f.ex. ['спальни', 'спальня', 'спален'])
//- value   {number} initial value
//- min     {number} maximum possible value
//- min     {number} minimum possible value
//- step    {number} step value
//- mods    {array} modifier classess
mixin counter(props = {})
  include /components/library/button/button.pug
  include /components/library/form-field/form-field.pug

  - 
    props = Object.assign({
      label: '',
      plurals: [],
      value: 0,
      min: 0,
      max: 100,
      step: 1,
      mods: []
    }, props)

    //- All counter attributes should be proxied to input element
    attributes.hidden = true
    attributes.type = 'number'
    attributes.value = props.value

    var wrapperAttributes = {
      'data-step': props.step,
      'data-min': props.min,
      'data-max': props.max,
      'data-label': props.label,
      'data-plurals': props.plurals
    }
    
    var mods = ['counter'].concat(props.mods)
    var inputMods = ['counter__input']
    var labelMods = ['counter__label']
    var buttonIncMods = ['counter__button-inc']
    var buttonDecMods = ['counter__button-dec']

  div(class= mods)&attributes(wrapperAttributes)
    label(class= labelMods)= props.label
      +form-field({mods: inputMods})&attributes(attributes)
    div.counter__controls
      +button({mods: buttonDecMods, isOutlined: true, value: '-'})&attributes({disabled: props.value <= parseInt(props.min, 10)})
      span.counter__display= props.value
      +button({mods: buttonIncMods, isOutlined: true, value: '+'})&attributes({disabled: props.value >= parseInt(props.max, 10)})
