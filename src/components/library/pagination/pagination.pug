//- Pagination component
//- ====================
//- Expected output (delta = 1, total = 1):
//- Selected page 1: ''
//- ====================
//- Expected output (delta = 1, total = 2):
//- Selected page 1: [(1), 2]
//- Selected page 2: [1, (2)]
//- ====================
//- Expected output (delta = 1, total = 3):
//- Selected page 1: [(1), 2, 3, ->]
//- Selected page 2: [<-, 1, (2), 3, ->]
//- Selected page 3: [<-, 1, 2, (3)]
//- ====================
//- Expected output (delta = 1, total = 4):
//- Selected page 1: [(1), 2, "...", 4, ->]
//- Selected page 2: [<-, 1, (2), 3, 4, ->]
//- Selected page 3: [<-, 1, 2, (3), 4, ->]
//- Selected page 4: [<-, 1, "...", 3, (4)]
//- ====================
//- Expected output (delta = 2, total = 20):
//- Selected page 1: [(1), 2, 3, "...", 20, ->]
//- Selected page 2: [<-, 1, (2), 3, 4, "...", 20, ->]
//- Selected page 3: [<-, 1, 2, (3), 4, 5, "...", 20, ->]
//- Selected page 4: [<-, 1, 2, 3, (4), 5, 6, "...", 20, ->]
//- Selected page 5: [<-, 1, 2, 3, 4, (5), 6, 7, "...", 20, ->]
//- Selected page 6: [<-, 1, "...", 4, 5, (6), 7, 8, "...", 20, ->]
//- Selected page 7: [<-, 1, "...", 5, 6, (7), 8, 9, "...", 20, ->]
//- Selected page 8: [<-, 1, "...", 6, 7, (8), 9, 10, "...", 20, ->]
//- Selected page 9: [<-, 1, "...", 7, 8, (9), 10, 11, "...", 20, ->]
//- Selected page 10: [<-, 1, "...", 8, 9, (10), 11, 12, "...", 20, ->]
//- Selected page 11: [<-, 1, "...", 9, 10, (11), 12, 13, "...", 20, ->]
//- Selected page 12: [<-, 1, "...", 10, 11, (12), 13, 14, "...", 20, ->]
//- Selected page 13: [<-, 1, "...", 11, 12, (13), 14, 15, "...", 20, ->]
//- Selected page 14: [<-, 1, "...", 12, 13, (14), 15, 16, "...", 20, ->]
//- Selected page 15: [<-, 1, "...", 13, 14, (15), 16, 17, "...", 20, ->]
//- Selected page 16: [<-, 1, "...", 14, 15, (16), 17, 18, 19, 20, ->]
//- Selected page 17: [<-, 1, "...", 15, 16, (17), 18, 19, 20, ->]
//- Selected page 18: [<-, 1, "...", 16, 17, (18), 19, 20, ->]
//- Selected page 19: [<-, 1, "...", 17, 18, (19), 20, ->]
//- Selected page 20: [<-, 1, "...", 18, 19, (20)]
//- ====================
//- 
//- currentPage     {number} Current page number
//- perPage         {number} Items to show per page
//- totalItems      {number} Total items in listing
//- delta           {number} Number of pages always visible from the left & right side of current page
//- label           {text}  Label template text.
//-                         Can use variables:
//-                           * idxFrom     {number} Index of first item on page
//-                           * idxTo       {number} Index of last item on page
//-                           * totalItems  {number} Total items in listing
//-                           * perPage     {number} Items shown per page
//-                         Can use functions:
//-                           * approximately(num) -> number rounded to nearest 10 downwards, adding '+' if needed
//-                           * any other js function ... 
//- labelPosition   {'left' | 'right' | 'top' | 'bottom'}
//- showLabel       {boolean} If true - label will be shown, false - otherwise
//- mods            {array} Modifier classess
mixin pagination(props = {})
  include /components/library/icon/icon.pug
  include /components/library/button/button.pug

  -
    props = Object.assign({
      currentPage: 1,
      perPage: 10,
      totalItems: 0,
      delta: 2,
      label: "${idxFrom} - ${idxTo} from ${approximately(totalItems)} variants for rent",
      showLabel: true,
      labelPosition: 'bottom',
      mods: []
    }, props)

    var mods = ['pagination', `pagination_label-pos-${props.labelPosition}`].concat(props.mods)
    var {currentPage, perPage, totalItems, delta} = props
    var lastPage = Math.ceil(props.totalItems / props.perPage)
    var idxFrom = 1
    var idxTo = 12
    var arrowMods = ['pagination__arrow']
    var pageMods = ['pagination__page']

    //- round number to nearest 10
    function approximately(n) {
      const x = Math.floor(n / 10) * 10
      if (x < n) return `${x}+`
      return `${x}`   
    }
  
  div(class= mods)&attributes(attributes)
    if (lastPage > 1)
      .pagination__listing
        //- prev arrow
        if (currentPage > 1 && lastPage > 2)
          +button({
            type: 'link', 
            isRounded: true, 
            iconName: 'arrow-left', 
            iconPosition: 'left',
            mods: arrowMods.concat('pagination__prev')
          })(href= dummyURL)

        //- main listing
        - for(let i = 1; i <= lastPage; i += 1)
          if (i === currentPage)
            +button({value: i, mods: pageMods.concat('pagination__page-current')})
          else if (i === 1)
            +button({type: 'link', isText: true, value: i, mods: pageMods.concat('pagination__page-first')})(href= dummyURL)
          else if (i === lastPage)
            +button({type: 'link', isText: true, value: i, mods: pageMods.concat('pagination__page-last')})(href= dummyURL)
          else if (i >= currentPage - delta && i <= currentPage + delta)
            +button({type: 'link', isText: true, value: i, mods: pageMods.concat('pagination__page-delta')})(href= dummyURL)
          else if (i === currentPage - delta - 1 || i === currentPage + delta + 1)
            span(class= pageMods.concat('pagination__dots')) ...

        //- next arrow
        if (currentPage < lastPage && lastPage > 2)
          +button({
            type: 'link', 
            isRounded: true, 
            iconName: 'arrow-right', 
            iconPosition: 'right',
            mods: arrowMods.concat('pagination__next')
          })(href= dummyURL)

      if (props.showLabel)
        .pagination__label= eval('`' + props.label + '`')